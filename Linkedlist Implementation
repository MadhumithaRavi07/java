public class LinkedList {
    Node head;

    class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            next = null;
        }
    }

    void insertDataAtBeginning(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
    }

    void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
    }

    void deleteAtBeginning() {
        if (head == null) {
            System.out.println("There is no node available");
        }
        head = head.next;
    }

    void insertAtSpecificPosition(int data, int pos) {
        if (pos == 0) {
            insertDataAtBeginning(data);
            return;
        }
        Node newNode = new Node(data);
        Node temp = head;
        for (int i = 1; i < pos; i++) {
            temp = temp.next;
            if (temp == null) {
                System.out.println("Invalid position");
                return;
            }
        }
        newNode.next = temp.next;
        temp.next = newNode;
    }

    void deleteAtSpecificPosition(int value) {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }
        while (head != null && head.data == value) {
            head = head.next;
        }
        Node current = head;
        while (current != null && current.next != null) {
            if (current.next.data == value) {
                current.next = current.next.next;
            } else {
                current = current.next;
            }
        }
    }

    boolean search(int key) {
        Node temp = head;
        while (temp != null) {
            if (temp.data == key) {
                return true;
            }
            temp = temp.next;
        }
        return false;
    }

    void reverse() {
        Node prevCurrent = null;
        Node current = head;
        Node nextCurrent;
        while (current != null) {
            nextCurrent = current.next;
            current.next = prevCurrent;
            prevCurrent = current;
            current = nextCurrent;
        }
        head = prevCurrent;
    }

    LinkedList() {
        head = null;
    }

    public static void main(String args[]) {
        LinkedList list = new LinkedList();
        list.insertAtSpecificPosition(1, 0);
        list.insertAtSpecificPosition(2, 1);
        list.insertAtSpecificPosition(3, 2);
        list.insertAtSpecificPosition(4, 3);
        list.insertAtSpecificPosition(3, 4); // Adding another 3 for testing
        list.display();
        System.out.println();

        // Deleting all occurrences of node with value 3
        list.deleteAtSpecificPosition(3);
        list.display();
        System.out.println();

        // Searching for element 3
        System.out.println("Is 3 present in the list? " + list.search(3));
    }
}
